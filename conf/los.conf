-----------------------------------------------------------------------
--                                                                   --
-- Copyright (C) 2003-2015,  Intelibo Ltd                            --
--                                                                   --
-- Project:       LOS                                                --
-- Filename:      los.conf                                           --
-- Description:   LOS configuration                                  --
--                                                                   --
-----------------------------------------------------------------------

app.name=los
app.version=0.1

-----------------------------------------------------------------------
-- configure directories
-----------------------------------------------------------------------
dir.base=$(LOS_HOME)

-- directory to prepare for chroot
dir.sysroot=$(dir.base)/stage_$(host.arch)

-- toolchain installation directory at stage 0
-- a link to $(dir.base)/tools
dir.stage0.install=/tools

-- install directory after chroot at stage 1
dir.stage1.install=/usr

-- install directory for the current stage
dir.install=$(dir.stage$(build.stage).install)
dir.lospec=$(dir.base)/lospec
dir.out=$(dir.base)/out
dir.src=$(dir.out)/src

-----------------------------------------------------------------------
-- configure repository
-----------------------------------------------------------------------
repo.username=<username>
repo.password=<password>
repo.los=http://$(repo.username):$(repo.password)@storage.intelibo.com/los
repo.opensource=$(repo.los)/opensource

-----------------------------------------------------------------------
-- configure system variables
-----------------------------------------------------------------------

mingw.pathsep=;
linux.pathsep=:
macosx.pathsep=$(linux.pathsep)

-----------------------------------------------------------------------
-- configure build variables
-- build is the system running the build process
-- use build options to configure the building tools
-----------------------------------------------------------------------

-- mingw, linux, macosx
build.system=unknown

-- i686, x86_64, powerpc
build.arch=unknown

-- make program
build.mingw.make=make
build.linux.make=make
build.macosx.make=make
build.make=$(build.$(build.system).make)

-- build system path separator
build.pathsep=$($(build.system).pathsep)

-- stage number which impacts building compiler
build.stage=0

-----------------------------------------------------------------------
-- configure host variables
-- host is the system the binaries are built for (cross compiling)
-- use host options to configure the builds
-----------------------------------------------------------------------

-- mingw, linux, macosx
host.system=$(build.system)

-- i686, x86_64, powerpc
host.arch=$(build.arch)

host.mingw.i686.cflags=-m32
host.mingw.x86_64.cflags=-m64
host.mingw.i686.asflags=-m32
host.mingw.x86_64.asflags=-m64
host.mingw.i686.ccflags=-m32
host.mingw.x86_64.ccflags=-m64
host.mingw.i686.ldflags=-m32
host.mingw.x86_64.ldflags=-m64
host.mingw.static.format=lib%s.a
host.mingw.dynamic.format=%s.dll
host.mingw.exec.format=%s.exe
host.linux.i686.cflags=-m32
host.linux.x86_64.cflags=-m64
host.linux.i686.asflags=-m32
host.linux.x86_64.asflags=-m64
host.linux.i686.ccflags=-m32
host.linux.x86_64.ccflags=-m64
host.linux.i686.ldflags=-m32
host.linux.x86_64.ldflags=-m64
host.linux.static.format=lib%s.a
host.linux.dynamic.format=lib%s.so
host.linux.exec.format=%s

gcc.cflags=$(host.$(host.system).$(host.arch).cflags)
gcc.asflags=$(host.$(host.system).$(host.arch).asflags)
gcc.ccflags=$(host.$(host.system).$(host.arch).ccflags)
gcc.ldflags=$(host.$(host.system).$(host.arch).ldflags)

host.static.format=$(host.$(host.system).static.format)
host.dynamic.format=$(host.$(host.system).dynamic.format)
host.exec.format=$(host.$(host.system).exec.format)

-- host system path separator
host.pathsep=$($(host.system).pathsep)

-----------------------------------------------------------------------
-- configure target variables
-- target is the system the built compiler will builds for (compiling compiler)
-- use target options to configure the compiler build
-----------------------------------------------------------------------

-- mingw, linux, macosx
target.system=$(host.system)

-- i686, x86_64, powerpc
target.arch=$(host.arch)

-----------------------------------------------------------------------
-- configure cross variables
-----------------------------------------------------------------------

cross.mingw.prefix=$(target.arch)-$(app.name)-mingw32
cross.linux.prefix=$(target.arch)-$(app.name)-$(target.system)-gnu
cross.macos.prefix=$(target.arch)-$(app.name)-$(target.system)
cross.prefix=$(cross.$(target.system).prefix)

-----------------------------------------------------------------------
-- configure cmake
-----------------------------------------------------------------------

cmake.generator=$($(build.system).cmake.generator)
mingw.cmake.generator=MinGW Makefiles
linux.cmake.generator=Unix Makefiles
macosx.cmake.generator=Unix Makefiles

cmake.make=$($(build.system).cmake.make)
mingw.cmake.make=mingw$(build.arch)-make
linux.cmake.make=$(build.make)
macosx.cmake.make=$(build.make)
