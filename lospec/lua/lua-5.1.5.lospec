readline = requires "readline == 6.2"
ncurses = requires "ncurses == 6.0"

package = {
	name     = "lua",
	version  = "5.1.5",
	source   = "$(repo.opensource)/lua-5.1.5.tar.gz"
}

local function make(dir, ...)
	return assert(api.executein(dir, conf["build.make"], {
		PATH = path.install.bin..conf["build.pathsep"].."/bin"..conf["build.pathsep"].."/usr/bin"
	}, ...))
end

function prepare()
	api.download()
	api.unarch()
end

function build()
	readline:install()
	ncurses:install()
	prepare()

	local luasrcdir = api.makepath(path.src.dir, "src")

	local ccflags
	local lua_a
	local lua_t
	local luac_t = string.format(conf["host.exec.format"], "luac")
	local ar
	local ldlibs = " -L"..path.install.lib.." -lreadline -lhistory"
	if conf["host.system"] == "mingw" then
		ccflags = "-DLUA_BUILD_AS_DLL -DLUA_USE_READLINE -I"..path.install.inc
		lua_a = "lua51.dll"
		lua_t = "lua.exe"
		ar = "$(CC) -shared -Wl,--out-implib,lua51.dll.a -o"
	else
		-- unlike mingw where readline is linked to termcap, in linux lua will link with ncurses
		ldlibs = ldlibs.." -lncursesw"
		ccflags = "-fPIC -DLUA_USE_LINUX -I"..path.install.inc
		local V = package.version[1].."."..package.version[2]
		local R = V.."."..package.version[3]
		lua_a = "liblua.so."..R
		lua_t = "lua"
		ar = "\\$(CC) -shared -ldl -lm -Wl,-soname,liblua.so."..V.." -o"
	end

	-- compiles lua library and interpreter
	make(luasrcdir,
		"LUA_A="..lua_a,
		"LUA_T="..lua_t,
		"AR="..ar,
		"RANLIB=strip --strip-unneeded",
		"MYCFLAGS="..ccflags,
		"MYLIBS="..ldlibs,
		"MYLDFLAGS=-s ",
		"CC=gcc "..conf["gcc.ldflags"].." "..conf["gcc.cflags"],
		lua_t)

	-- compiles luac and liblua.a
	make(luasrcdir, "LUAC_T="..luac_t, "CC=gcc "..conf["gcc.ldflags"].." "..conf["gcc.cflags"], luac_t)
end

local function dynamicname(v)
	local name = package.name
	if conf["host.system"] == "mingw" then
		name = name..package.version[1]..package.version[2]
	end

	local dynamic = string.format(conf["host.dynamic.format"], name)

	v = v or 3
	if conf["host.system"] == "mingw" or v == 0 then
		return dynamic
	else
		local vers = {}
		for i = 1, v do
			table.insert(vers, package.version[i])
		end
		return dynamic.."."..table.concat(vers, ".")
	end
end

function isinstalled()
	return api.isinstalled{
		h = "lua.h",
		exec = string.format(conf["host.exec.format"], package.name),
		static = package.name,
		dynamic = dynamicname()
	}
end

function install()
	if not isinstalled() then
		build()
		make(path.src.dir,
			"install",
			"INSTALL_TOP="..path.install.dir)

		local dynamic = dynamicname()
		if conf["host.system"] == "mingw" then
			api.copy(api.makepath(path.src.dir, "src/"..dynamic), path.install.bin)
			api.copy(api.makepath(path.src.dir, "src/"..dynamic..".a"), path.install.lib)
		else
			api.copy(api.makepath(path.src.dir, "src/"..dynamic), path.install.lib)
			lfs.link(dynamic, api.makepath(path.install.lib, dynamicname(2)))
			lfs.link(dynamic, api.makepath(path.install.lib, dynamicname(0)))
		end
		assert(isinstalled(), "something wrong after "..package.name.." install")
	end
end
