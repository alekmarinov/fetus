readline = requires "readline == 6.2"
ncurses = requires "ncurses == 6.0"

package = {
	name     = "lua",
	version  = "5.1.5",
	source   = "$(repo.opensource)/lua-5.1.5.tar.gz"
}

local function make(dir, ...)
	local args = {}
	for _, v in ipairs{"VERBOSE=1", ...} do
		table.insert(args, "\""..v.."\"")
	end

	local cmd = conf["host.make"].." "..table.concat(args, " ")
	log.i(cmd)
	return assert(lfs.executein(dir, cmd))
end

function prepare()
	api.download()
	api.unarch()
end

function build()
	if readline then
		readline:install()
	end
	if ncurses then
		ncurses:install()
	end
	prepare()

	if conf["host.system"] == "mingw" then
		local luasrcdir = api.makepath(path.src.dir, "src")

		local ccflags = readline and " -DLUA_USE_READLINE -I"..path.install.inc or ""
		local ldlibs = readline and " -L"..path.install.lib.." -lreadline -lhistory" or ""

		-- compiles lua library and interpreter
		make(luasrcdir,
			"LUA_A=lua51.dll",
			"LUA_T=lua.exe",
			"AR=$(CC) -shared -Wl,--out-implib,lua51.dll.a -o",
			"RANLIB=strip --strip-unneeded",
			"MYCFLAGS=-DLUA_BUILD_AS_DLL"..ccflags,
			"MYLIBS="..ldlibs,
			"MYLDFLAGS=-s ",
			"CC=gcc "..conf["gcc.ldflags"].." "..conf["gcc.cflags"],
			"lua.exe")

		-- compiles luac
		make(luasrcdir, "LUAC_T=luac.exe", "CC=gcc "..conf["gcc.ldflags"].." "..conf["gcc.cflags"], "luac.exe")
	else
		make(path.src.dir, conf["host.system"])
	end
end

function isinstalled()
	return api.isinstalled {
		h = "lua.h",
		dynamic = "lua51",
		static = "lua"
	}
end

function install()
	if not isinstalled() then
		build()
		make(path.src.dir,
			"install",
			"INSTALL_TOP="..path.install.dir)

		if conf["host.system"] == "mingw" then
			api.copy(api.makepath(path.src.dir, "src/lua51.dll"), path.install.bin)
			api.copy(api.makepath(path.src.dir, "src/lua51.dll.a"), path.install.lib)
		end
		assert(isinstalled(), "something wrong after lua install")
	end
end
