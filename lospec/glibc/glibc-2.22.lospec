binutils = assert(requires("binutils == 2.25.1"))
linux = requires "linux"

package = {
	name     = "glibc",
	version  = "2.22",
	source   = "$(repo.opensource)/glibc-2.22.tar.bz2",
	patch    = {
		"glibc-2.22-upstream_i386_fix-1.patch",
		"glibc-2.22-fhs-1.patch",
		"glibc-2.22-largefile-1.patch"
	}
}

use ("autotools", {build_outside = true})

function prepare()
	if conf["build.stage"] == 0 then
		assert(binutils.isinstalled("--pass1") or binutils.isinstalled("--pass2"), "binutils must be installed before glibc")
	end

	linux.install()

	api.download()
	api.unarch()
	api.patch(1)
end

function build()
	prepare()
	local confargs

	if conf["build.stage"] == 0 then
		confargs = {
			["--host"] = conf["cross.prefix"],
			["--build"] = api.readexecout(api.makepath(path.src.dir, "scripts/config.guess")),
			"--disable-profile",
			["--enable-kernel"] = "2.6.32",
			"--enable-obsolete-rpc",
			["--with-headers"] = path.install.inc,
			libc_cv_forced_unwind = "yes",
			libc_cv_ctors_header = "yes",
			libc_cv_c_cleanup = "yes",
			CFLAGS = "-O -Wno-error=maybe-uninitialized"
		}
	else
		confargs = {
			"--disable-profile",
			["--enable-kernel"] = "2.6.32",
			"--enable-obsolete-rpc",
			CFLAGS = "-O -Wno-error=maybe-uninitialized"
		}
	end

	if api.isarch32(conf["host.arch"]) then
		confargs.CC = "gcc -m32 -D_GNU_SOURCE -march="..conf["host.arch"]
	end
	autotools.configure(confargs)
	autotools.make()
end

function isinstalled()
	local dynamic = "c"
	if conf["build.stage"] > 0 then
		if api.isarch32() then
			dynamic = "../lib/libc.so"
		else
			dynamic = "../lib64/libc.so"
		end
	end

	return api.isinstalled{
		h = {"stdio.h", "stdlib.h", "elf.h"},
		exec = "ldd",
		dynamic = dynamic
	}
end

function install()
	if not isinstalled() then
		log.i(string.format("Installing %s stage %d", package.name, conf["build.stage"]))
		build()
		autotools.install()

		if conf["build.stage"] == 0 then
			-- copy crt1.o, crti.o and crtn.o in ld search path 
			local lddir = lfs.dirname(api.readexecout(api.makepath(path.install.bin, conf["cross.prefix"].."-gcc"), "-print-libgcc-file-name"))
			for _, file in ipairs{"crt1.o", "crti.o", "crtn.o"} do
				api.copy(api.makepath(path.install.lib, file), lddir)
			end
		elseif conf["build.stage"] == 1 then
			lfs.mkdir(api.makepath(conf["dir.sysroot"], "etc"))
			api.copy(api.makepath(path.src.dir, "nscd/nscd.conf"), api.makepath(conf["dir.sysroot"], "etc"))
			lfs.mkdir(api.makepath(conf["dir.sysroot"], "var/cache/nscd"))

			api.catfile(api.makepath(conf["dir.sysroot"], "etc/nsswitch.conf"), [[
# Begin /etc/nsswitch.conf

passwd: files
group: files
shadow: files

hosts: files dns
networks: files

protocols: files
services: files
ethers: files
rpc: files

# End /etc/nsswitch.conf
]])
		end

		-- Adjusting the toolchain
		local gccld1 = api.makepath(conf["dir.stage0.install"], "bin/ld")
		local gccld2 = api.makepath(conf["dir.stage0.install"], api.readexecout("gcc", "-dumpmachine"), "bin/ld")
		if not lfs.isfile(gccld1.."-new") then
			log.e("File "..gccld1.."-new is missing but expected from installing binutils at stage 0 pass 2. Skip toolchain adjustment.")
		else

			lfs.move(gccld1, gccld1.."-old")
			lfs.move(gccld2, gccld2.."-old")
			lfs.move(gccld1.."-new", gccld1)
			lfs.link(gccld1, gccld2)

			assert(lfs.execute("gcc -dumpspecs | sed -e 's@/tools@@g' -e '/\\*startfile_prefix_spec:/{n;s@.*@/usr/lib/ @}' -e '/\\*cpp:/{n;s@$@ -isystem /usr/include@}' > `dirname $(gcc --print-libgcc-file-name)`/specs"))
		end
		assert(isinstalled(), "something wrong after "..package.name.." install")
	end
end
