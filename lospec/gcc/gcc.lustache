zlib = assert(requires("zlib == {{requires.zlib}}"))
gmp = assert(requires("gmp == {{requires.gmp}}"))
mpfr = assert(requires("mpfr == {{requires.mpfr}}"))
mpc = assert(requires("mpc == {{requires.mpc}}"))

package = {
	name     = "gcc",
	version  = "{{version}}",
	source   = "$(repo.opensource)/gcc-{{version}}.tar.bz2"
}

use ("autotools", {build_outside = true})

function prepare()
	api.download()
	api.unarch()
	zlib.install()
	gmp.install()
	mpfr.install()
	mpc.install()
end

function build(...)
	prepare()
	local env = { SED = "sed" }
	local confargs = {
		["--enable-languages"] = "c,c++",
		"--disable-multilib",
		"--disable-bootstrap",
		"--with-system-zlib"
	}
	autotools.configure(confargs, env)
	autotools.make()
end

function isinstalled(...)
	local execs = {}
	for _, ex in ipairs{
		"c++",
		"cpp",
		"g++",
		"gcc"} do
		table.insert(execs, ex)
	end
	return api.isinstalled{
		exec = execs
	}
end

function install(...)
	if not isinstalled(...) then
		build(...)
		autotools.install()
		lfs.execute("ln", "-sv", "gcc", api.makepath(path.install.bin, "cc"))
		local lib = "lib"
		if not api.isarch32() then
			lib = lib.."64"
		end
		lfs.execute("ln", "-sv", api.makepath("..", api.makepath(path.install.bin, "cpp")), api.makepath(path.install.dir, "..", lib))
		
		-- Add a compatibility symlink to enable building programs with Link Time Optimization (LTO)
		lfs.execute("install", "-v", "-dm755", api.makepath(path.install.lib, "bfd-plugins"))
		lfs.execute("ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/{{version}}/liblto_plugin.so "..api.makepath(path.install.lib, "bfd-plugins"))
		assert(isinstalled(...), "something wrong after gcc install") 
	end
end
