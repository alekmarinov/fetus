package = {
	name = "zlib",
	version = "1.2.8",
	source = "$(repo.opensource)/zlib128.zip",
	archdir = "zlib-1.2.8"
}

use "autotools"

function prepare()
	api.download()
	api.unarch()
end

function build()
	prepare()
	api.copy(api.makepath(path.src.dir, "contrib/asm686/match.S"), path.src.dir)
	if conf["build.system"] == "mingw" then
		if api.isarch32(conf["host.arch"]) then
			api.executein(path.src.dir, conf["build.make"], nil, "all", "RCFLAGS=--define GCC_WINDRES --target=pe-i386", "ASFLAGS=-m32", "CFLAGS=-m32", "LDFLAGS=-m32", "LOC=-DASMV", "OBJA=match.o", "-fwin32/Makefile.gcc")
		else
			api.executein(path.src.dir, conf["build.make"], nil, "all", "RCFLAGS=--define GCC_WINDRES", "LOC=-DASMV", "OBJA=match.o", "-fwin32/Makefile.gcc")
		end
	else
		api.executein(path.src.dir, "sh", api.mkenv{CFLAGS=conf["gcc.cflags"]}, "configure", "--prefix="..path.install.dir)
		autotools.make()
	end
end

function isinstalled()
	local files = {
		h = "zlib.h",
		static = {"z"}
	}
	if conf["host.system"] == "mingw" then
		files.static = {"z.dll"}
		files.dynamic = "zlib1.dll"
	end
	return api.isinstalled(files)
end

function install()
	if not isinstalled() then
		build()
		if conf["host.system"] == "mingw" then
			api.executein(path.build, conf["build.make"], nil, "install", "BINARY_PATH="..path.install.bin, "LIBRARY_PATH="..path.install.lib, "INCLUDE_PATH="..path.install.inc, "SHARED_MODE=1", "-fwin32/Makefile.gcc")
		else
			autotools.install()
		end
		assert(isinstalled(), "something wrong after zlib install")
	end
end
