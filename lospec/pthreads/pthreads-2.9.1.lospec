
package = {
	name     = "pthreads",
	version  = "2.9.1",
	source   = {
		mingw = "$(repo.opensource)/pthreads-w32-2-9-1-release.tar.gz"
	}
}

function prepare()
	if conf["host.system"] == "mingw" then
		api.download()
		api.unarch()
	end
end

function build()
	prepare()
	if conf["host.system"] == "mingw" then
		-- make
		local makeargs = {
			"GC"
		}
		if api.isarch32(conf["host.arch"]) then
			table.insert(makeargs, "CC=gcc -m32")
			table.insert(makeargs, "RC=windres --target=pe-i386")
			table.insert(makeargs, "DLLTOOL=dlltool --as-flags=--32 -m i386:x86-64")
		end
		api.executein(
			path.src.dir,
			conf["build.make"],
			nil,
			unpack(makeargs)
		)
		local dlltoolargs = {}
		if api.isarch32(conf["host.arch"]) then
			dlltoolargs = {
				"--as-flags=--32",
				"-m",
				"i386:x86-64"
			}
		end
		lfs.executein(path.src.dir, "dlltool", "-d", "pthread.def", "-l", "libpthreadGC2.dll.a", unpack(dlltoolargs))
	end
end

function isinstalled()
	if conf["host.system"] == "mingw" then
		return api.isinstalled{
			h = "pthread.h",
			static = {"pthreadGC2"},
			dynamic = "pthreadGC2"
		}
	else
		return true
	end
end

function install()
	if not isinstalled() then
		build()
		if conf["host.system"] == "mingw" then
			api.copy(api.makepath(path.src.dir, "pthreadGC2.dll"), path.install.bin)
			api.copy(api.makepath(path.src.dir, "libpthreadGC2.a"), path.install.lib)
			api.copy(api.makepath(path.src.dir, "libpthreadGC2.dll.a"), path.install.lib)
			for _, hfile in ipairs{"pthread.h", "sched.h", "semaphore.h"} do
				api.copy(api.makepath(path.src.dir, hfile), path.install.inc)
			end
		end
		assert(isinstalled(), "something wrong after pthread install")
	end
end
